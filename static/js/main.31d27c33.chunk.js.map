{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initData","createContext","require","Hint","react_default","a","createElement","className","chooseAWord","max","Object","keys","length","randomVar","Math","floor","random","result","n","shuffle","split","i","rmVar","_ref","join","Game","props","dictionary","useContext","_useState","useState","_useState2","slicedToArray","question","setQuestion","_useState3","_useState4","score","setScore","_useState5","_useState6","tracker","setTrack","_useState7","_useState8","answer","setAnswer","_useState9","_useState10","gameStatus","setStatusG","type","value","onChange","e","target","onKeyPress","console","log","key","lowerCaseAnswer","toLowerCase","p","j","indexOf","splice","checkIfItContain","includes","concat","toConsumableArray","onClick","App_Hint","App_Answer","track","Answer","map","x","App","initState","_useState11","wordCount","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q97lFAMMA,SAAYC,wBAAcC,EAAQ,MAKlCC,EAAO,WACX,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gDACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6EACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,4DACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,oFACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,0DAKR,SAASC,EAAYR,GACnB,IAAIS,EAAMC,OAAOC,KAAKX,GAAUY,OAC5BC,EAAYC,KAAKC,MAAMD,KAAKE,UAAYF,KAAKC,MAAMN,GAAO,IAC1DQ,EAAS,GACb,IAAK,IAAIC,KAAKlB,EACZ,GAAIA,EAASkB,GAAK,EAAG,CACnB,GAAIJ,KAAKC,MAAMF,EAAY,GAAK,GAAI,CAClCI,EAASC,EACT,MAEAL,GAAwBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAO9C,IADA,IAAIG,GAFJF,EAA2B,GAAjBA,EAAOL,OAAe,UAAYK,GAEvBG,MAAM,IAClBC,EAAI,EAAGA,EAAIF,EAAQP,OAAQS,IAAK,CACvC,IAAIC,EAAQR,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMI,EAAQP,OAAS,IAD5BW,EAER,CAACJ,EAAQG,GAAQH,EAAQE,IAAvDF,EAAQE,GAF8BE,EAAA,GAE1BJ,EAAQG,GAFkBC,EAAA,GAKzC,OADAN,EAASE,EAAQK,KAAK,IA2BxB,IAAMC,EAAQ,SAAAC,GACZ,IAAMC,EAAaC,qBAAW5B,GADT6B,EAGWC,mBAAS,kBAAItB,EAAYmB,KAHpCI,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAmB,EAAA,GAGdI,EAHcF,EAAA,GAGJG,EAHIH,EAAA,GAAAI,EAIKL,mBAAS,GAJdM,EAAA1B,OAAAsB,EAAA,EAAAtB,CAAAyB,EAAA,GAIdE,EAJcD,EAAA,GAIPE,EAJOF,EAAA,GAAAG,EAKOT,mBAAS,IALhBU,EAAA9B,OAAAsB,EAAA,EAAAtB,CAAA6B,EAAA,GAKdE,EALcD,EAAA,GAKLE,EALKF,EAAA,GAAAG,EAMOb,mBAAS,IANhBc,EAAAlC,OAAAsB,EAAA,EAAAtB,CAAAiC,EAAA,GAMdE,EANcD,EAAA,GAMNE,EANMF,EAAA,GAAAG,EAOYjB,mBAAS,kDAPrBkB,EAAAtC,OAAAsB,EAAA,EAAAtB,CAAAqC,EAAA,GAOdE,EAPcD,EAAA,GAOFE,EAPEF,EAAA,GAoErB,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAY0B,GACzB7B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAU0C,GACvB7C,EAAAC,EAAAC,cAAA,SAAO6C,KAAM,OAAOC,MAAOP,EAAQQ,SAAU,SAAAC,GAAC,OAAER,EAAUQ,EAAEC,OAAOH,QAAQI,WAzD/E,SAAoBF,GAElB,GADAG,QAAQC,IAAIJ,EAAEC,OAAOH,OACR,SAATE,EAAEK,IAAgB,CAEpB,GAAc,IAAVd,EAAc,OAClB,GAAIA,EAAOjC,OAAS,EAElB,YADAsC,EAAW,0CAGb,GAAIL,EAAOjC,OAASqB,EAASrB,OAE3B,YADAsC,EAAW,+DAGb,IAAIU,EAAiBf,EAAOgB,cAC5B,IAAIlC,EAAWiC,GAEb,YADAV,EAAW,mCAtDnB,SAA0BjB,EAAUY,GAIlC,IAFA,IAAIiB,EAAIjB,EAAOzB,MAAM,IAEZC,EAAI,EAAGA,EAAIY,EAASrB,QAEX,GAAZkD,EAAElD,OAF6BS,IAAK,CAMxC,IAAI0C,EAAID,EAAEE,QAAQ/B,EAASZ,IAEvB0C,GAAK,GAEPD,EAAEG,OAAOF,EAAG,GAKhB,OAAoB,GAAZD,EAAElD,OAuCFsD,CAAiBjC,EAAU2B,GAe7BV,EAAW,wFAdW,GAAlBT,EAAQ7B,QACV8B,EAAS,CAACkB,IACVd,EAAU,IACVR,EAASD,EAAQV,EAAWiC,IAC5BV,EAAW,0DACDT,EAAQ0B,SAASP,GAM3BV,EAAW,2CALXR,EAAQ,GAAA0B,OAAA1D,OAAA2D,EAAA,EAAA3D,CAAK+B,GAAL,CAAcmB,KACtBtB,EAASD,EAAQV,EAAWiC,IAC5Bd,EAAU,IACVI,EAAW,0DA8Bf9C,EAAAC,EAAAC,cAAA,yBAAiB+B,EAAjB,KACAjC,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAKpC,GAlExBQ,EAAS,IACTI,EAAU,IACVR,EAAS,GACF9B,EAAYmB,OA+DjB,0BACkB,GAAhBc,EAAQ7B,OACPR,EAAAC,EAAAC,cAACiE,EAAD,MACAnE,EAAAC,EAAAC,cAACkE,EAAD,CAAQC,MAAShC,MAIpBiC,EAAS,SAAAhD,GACb,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,IAA0BmB,EAAM+C,MAAME,IAAI,SAACC,EAAEvD,GAAH,OAAQjB,EAAAC,EAAAC,cAAA,YAAOsE,EAAP,UAsBzCC,EAjBH,SAAAnD,GAEV,IAAMoD,EAAYlD,qBAAW5B,GAFX+E,EAGEjD,mBAAS,kBAAIpB,OAAOC,KAAKmE,GAAWlE,SAAjDoE,EAHWtE,OAAAsB,EAAA,EAAAtB,CAAAqE,EAAA,MAKhB,OACE3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAElBH,EAAAC,EAAAC,cAAA,SAAI0E,EAAJ,WACA5E,EAAAC,EAAAC,cAAC2E,EAAD,SClKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31d27c33.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {createContext} from 'react';\n\n\nconst initData =  createContext(require('./filtered.json'));\n// var max = 0;\n// let lengthX = Object.keys(initData).length;\n\n\nconst Hint = ()=>{\n  return (\n    <div>\n        <p className='hint'> how to play: </p>\n        <p className='hint'> you'll be given a set of 8 to 10 character </p>\n        <p className='hint'> so guess any word that include some ~or better~ all of those characters </p>\n        <p className='hint'> the game's answer contains only word of length 4 to 10 </p>\n        <p className='hint'> longer word, means more point, and  don't guess the word(s) you guessed before </p>  \n        <p className='hint'> and when you're burned out, just try another word  </p>  \n    </div>      \n  )\n}\n\nfunction chooseAWord(initData) {\n  let max = Object.keys(initData).length;\n  let randomVar = Math.floor(Math.random() * (Math.floor(max) / 2))\n  let result = '';\n  for (let n in initData) {\n    if (initData[n] > 8) {\n      if (Math.floor(randomVar / 2) < 10) {\n        result = n;\n        break;\n      } else {\n        randomVar = randomVar - Math.floor(Math.random() * 4);\n      }\n    }\n  }\n  result = (result.length == 0) ? 'anagram' : result;\n  //shuffle\n  let shuffle = result.split('');\n  for (let i = 0; i < shuffle.length; i++) {\n    let rmVar = Math.floor(Math.random() * Math.floor(shuffle.length - 1));\n    [shuffle[i], shuffle[rmVar]] = [shuffle[rmVar], shuffle[i]]\n  }\n  result = shuffle.join('');\n  return result;\n}\n\nfunction checkIfItContain(question, answer) {\n  // answer = answer.toLowerCase();\n  let p = answer.split('');\n  // console.log('input =>',p);\n  for (let i = 0; i < question.length; i++) {\n    // console.log('now it\\'s input =>',p,'matching it against', question[i]);\n    if (p.length == 0) {      \n      // console.log('this should stop');\n      break;\n    }\n    let j = p.indexOf(question[i]);\n    // console.log('found at: ', j);\n    if (j > -1) {\n      // console.log('splicing this one', p[j], 'currently p is at length: ', p.length );\n      p.splice(j, 1);\n      // console.log('new length: ',p.length, p );\n    }\n  }\n  // console.log('length of p is', p.length, (p.length == 0) ? true : false);\n  return (p.length == 0) ? true : false;\n}\n\n\nconst Game =  props => {\n  const dictionary = useContext(initData);\n\n  const [question, setQuestion] = useState(()=>chooseAWord(dictionary));\n  const [score, setScore] = useState(0);\n  const [tracker, setTrack] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [gameStatus, setStatusG] = useState(\"write down your answer below, then press ENTER\");\n\n  function newGame() {\n    setTrack([]);\n    setAnswer('');\n    setScore(0);\n    return chooseAWord(dictionary);\n  }\n\n  function pressEnter(e) {\n    console.log(e.target.value);\n    if (e.key == \"Enter\") {\n      \n      if (answer == '') return;\n      if (answer.length < 4) {\n        setStatusG('the answer contain 4 letter at minimum');\n        return;\n      }\n      if (answer.length > question.length) {\n        setStatusG('the answer should not contain more letter than the question');\n        return;\n      }\n      let lowerCaseAnswer= answer.toLowerCase();\n      if(!dictionary[lowerCaseAnswer] ){\n        setStatusG('that word is not in dictionary');\n        return;\n      }\n      // console.log('checking for these:', question,answer);\n      if (checkIfItContain(question, lowerCaseAnswer)) {\n        if (tracker.length == 0 ) {\n          setTrack([lowerCaseAnswer]);\n          setAnswer('');\n          setScore(score + dictionary[lowerCaseAnswer]);\n          setStatusG(\"you found the first one... can you find the next one?\");\n        } else if (!tracker.includes(lowerCaseAnswer)) {\n          setTrack([...tracker, lowerCaseAnswer]);\n          setScore(score + dictionary[lowerCaseAnswer]);\n          setAnswer('');\n          setStatusG(\"you found the next one... can you find the other?\");\n        } else {\n          setStatusG(\"you've guessed that one... so no score\");\n        }\n      } else {\n        setStatusG(\"the word you've written, has a character or more that aren't in question characters \");\n      } \n    }\n  }\n\n  // function setHelp (x){\n  //   setAnswer(x);\n  //   if(answer.length==0){\n  //     setStatusG(\"write down your answer below, then press ENTER\");\n  //   } else if(answer.length==0){\n  //     setStatusG(\"press ENTER, to have your answer checked\");\n  //   }\n  // }\n  // yes https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif\n  // nono https://media.giphy.com/media/l1J9COnlFRcnkIn8Q/giphy.gif\n  // setQuestion('TEST');\n  // question = 'TEST';\n  \n  return (\n    <div>\n      <p>find word that contain these letters: </p>\n      <p className=\"question\">{question}</p>\n      <p className=\"helper\">{gameStatus}</p>      \n      <input type= 'text' value={answer} onChange={e=>setAnswer(e.target.value)} onKeyPress={pressEnter}></input>\n\n      <p>your score : {score} </p>\n      <button onClick={()=> setQuestion(newGame())}>let me try another one</button>\n      {(tracker.length==0)\n        ?<Hint/>\n        :<Answer track = {tracker}/>}\n    </div>\n  )\n}\nconst Answer = props => {\n  return (\n    <div>\n      <h3>these are what you've answered</h3>\n      <p className=\"answered\"> {props.track.map((x,i)=>(<span>{x} </span>))}\n      </p>\n    </div>\n  )\n}\nconst App = props=> {\n   \n  const initState = useContext(initData);\n  const [wordCount] = useState(()=>Object.keys(initState).length);\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n   \n        <p>{wordCount} words </p>          \n        <Game />\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />           */}\n         </header>\n      </div>\n    );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}